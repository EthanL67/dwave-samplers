version: 2.1

jobs:

  build-manylinux:
    parameters:
      manylinux-tag:
        type: string
      manylinux-arch:
        type: string
      python-version:
        type: string

    docker:
      - image: quay.io/pypa/<< parameters.manylinux-tag >>_<< parameters.manylinux-arch >>

    steps:
      - checkout

      - run:
          name: Build wheels
          command: |
            for py in /opt/python/cp*/bin/python; do
              ver=$("$py" -c 'import sys; print("{0.major}.{0.minor}".format(sys.version_info))')
              [[ "$ver" != "<< parameters.python-version >>" ]] && continue
              "$py" -m pip wheel . -w ./wheelhouse --no-deps
            done

      - run:
          name: Bundle shared libraries into wheels
          command: |
            plat="<< parameters.manylinux-tag >>_<< parameters.manylinux-arch >>"
            for whl in ./wheelhouse/*.whl; do
              auditwheel repair "$whl" --plat "$plat" -w ./distotheque
            done

      - store_artifacts:
          path: distotheque

      - persist_to_workspace:
          root: distotheque
          paths: .

  build-sdist:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout

      - run:
          name: Build sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            python setup.py sdist -d ./distotheque

      - store_artifacts:
          path: distotheque

      - persist_to_workspace:
          root: distotheque
          paths: .

  test-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: circleci/python:<< parameters.python-version >>

    steps:
      - checkout

      - attach_workspace:
          at: distotheque

      - restore_cache: &restore-cache-env
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &create-virtualenv
          name: Create virtual environment
          command: |
            python -m venv env

      - run: &install-requirements
          name: Install requirements
          command: |
            env/bin/pip install -r requirements.txt -r tests/requirements.txt

      - save_cache: &save-cache-env
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - env

      - run: &install-package
          name: Install package
          command: |
            env/bin/pip install --no-index --find-links=distotheque dwave-greedy

      - run: &run-python-tests
          name: Run Python tests
          command: |
            . env/bin/activate
            cd tests    # make sure we use the installed package
            coverage run -m unittest discover

      - run: &upload-python-code-coverage
          name: Upload code coverage
          command: |
            . env/bin/activate
            codecov     # calls `coverage xml`, so we must activate venv

  deploy-linux:
    docker:
      - image: circleci/python:3.9

    steps:
      - attach_workspace:
          at: distotheque

      - run:
          name: Deploy sdist and linux wheels
          command: |
            python -m venv env
            . env/bin/activate
            pip install twine
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD --skip-existing ./distotheque/*


workflows:
  test:
    jobs:
      - build-sdist

      - build-manylinux:
          name: build-<< matrix.manylinux-tag >>_<< matrix.manylinux-arch >>-py<< matrix.python-version >>
          matrix:
            parameters:
              manylinux-tag: ["manylinux1", "manylinux2010"]
              manylinux-arch: ["x86_64"]
              python-version: &python-versions ["3.6", "3.7", "3.8", "3.9"]

      - test-linux:
          requires:
            - build-manylinux
          matrix:
            parameters:
              python-version: *python-versions

  deploy:
    jobs:
      - build-sdist:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/

      - build-manylinux:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          name: build-<< matrix.manylinux-tag >>_<< matrix.manylinux-arch >>-py<< matrix.python-version >>
          matrix:
            parameters:
              manylinux-tag: ["manylinux1", "manylinux2010"]
              manylinux-arch: ["x86_64"]
              python-version: *python-versions

      - test-linux:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          requires:
            - build-sdist
            - build-manylinux
          matrix:
            parameters:
              python-version: *python-versions

      - deploy-linux:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          requires:
            - test-linux

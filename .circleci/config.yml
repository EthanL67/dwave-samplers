version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:
  test-linux:
    parameters:
      python-version:
        type: string
    
    docker:
      - image: circleci/python:<< parameters.python-version >>

    steps:
      - checkout

      - run: &install-boost-linux-template
          name: install boost
          command: |
            sudo apt-get --allow-releaseinfo-change update
            sudo apt-get install libboost-dev

      - restore_cache: &restore-cache-template
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &create-virtualenv-template
          name: create virtualenv
          command: |
            python -m virtualenv env

      - run: &install-dependencies-template
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            pip install --upgrade pip
            pip install -r requirements.txt -r tests/requirements.txt

      - save_cache: &save-cache-template
          paths:
            - ./env
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &build-ext-template
          name: build extension
          command: |
            . env/bin/activate
            python setup.py build_ext --inplace

      - run: &run-tests-template
          name: run unittests
          command: |
            . env/bin/activate
            python --version
            coverage run -m unittest discover

      - run:  &codecov-template
          name: codecov
          command: |
            . env/bin/activate
            codecov

  test-osx:
    parameters:
      python-version:
        type: string

    macos:
      xcode: "12.2.0"

    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1

      # Force (lie about) macOS 10.9 binary compatibility.
      # Needed for properly versioned wheels.
      # See: https://github.com/MacPython/wiki/wiki/Spinning-wheels
      MACOSX_DEPLOYMENT_TARGET: 10.9

    steps: 
      - checkout

      - run: 
          name: install pyenv
          command: |
            brew install pyenv

      - run: &install-boost-osx-template
          name: install boost
          command: |
            brew install boost

      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.2.0

      - run:
          name: install python
          command: |
            pyenv install << parameters.python-version >> -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.2.0

      - run:
          name: create virtualenv
          command: |
            eval "$(pyenv init -)"
            pyenv local << parameters.python-version >>
            python -m pip install virtualenv
            python -m virtualenv env

      - run: *install-dependencies-template

      - run: *build-ext-template
        
      - run: *run-tests-template

      # - run: *codecov-template

  test-win:
    parameters:
      python-version:
        type: string
      architecture:
        type: string

    executor:
      name: win/default

    environment:
      CL: /d2FH4-

    steps:
      - checkout

      - run: &win-install-python-template
          name: install python and create venv
          command: |
            nuget install python<< parameters.architecture >> -Version << parameters.python-version >> -ExcludeVersion -OutputDirectory .
            .\python<< parameters.architecture >>\tools\python.exe --version
            .\python<< parameters.architecture >>\tools\python.exe -m venv env

      - run: &win-install-dependencies-template
          name: install dependencies
          command: |
            env\Scripts\activate.ps1
            python --version
            pip install --upgrade pip
            pip install -r tests/requirements.txt

      - run:  &win-install-boost-template
          name: install boost
          command: |
             nuget install boost -ExcludeVersion -OutputDirectory .

      - run: &win-build-ext-template
          name: build extension
          command: |
            env\Scripts\activate.ps1
            python setup.py build_ext --inplace --include-dirs boost\lib\native\include\

      - run: &win-run-unittests-template
          name: run unittests
          command: |
            env\Scripts\activate.ps1
            coverage run -m unittest discover

      - run: &win-build-wheel-template
          name: create wheel
          command: |
            env\Scripts\activate.ps1
            $env:CL+=' -Iboost\lib\native\include\'
            python setup.py bdist_wheel

      - store_artifacts:
          path: .\dist

      # - run: &win-codecov-template
      #     name: codecov
      #     command: |
      #       env\Scripts\activate.ps1
      #       codecov

  test-win-py38x86: &win-tests-template-x86
    executor:
      name: win/default

    environment:
      PYTHON: 3.8.0

    working_directory: ~/repo

    steps:
      - checkout

      - run:  &win-install-pythonx86-template
          name: install python and create virtualenv
          command: |
            nuget install pythonx86 -Version $env:PYTHON -ExcludeVersion -OutputDirectory .
            .\pythonx86\tools\python.exe --version
            .\pythonx86\tools\python.exe -m pip install virtualenv
            .\pythonx86\tools\python.exe -m virtualenv env

      - run: *win-install-dependencies-template

      - run: *win-install-boost-template

      - run: *win-build-ext-template

      - run: *win-run-unittests-template

      - run: *win-build-wheel-template

      - store_artifacts:
          path: .\dist

      # - run: *win-codecov-template

  test-doctest:
    docker:
      - image: circleci/python:3.7-stretch # as of march 2019 RTD uses 3.7

    working_directory: ~/repo

    steps:
      - checkout

      - run: *install-boost-linux-template

      - restore_cache: *restore-cache-template

      - run: *create-virtualenv-template

      - run: *install-dependencies-template

      - run:
          name: install sphinx
          command: |
            . env/bin/activate
            pip install -r requirements.txt -r docs/requirements.txt

      - save_cache: *save-cache-template

      - run: *build-ext-template

      - run:
          name: build docs
          command: |
            . env/bin/activate
            make -C docs/ html

      - store_artifacts:
          path: ./docs/build/html

      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ doctest

##################################################################################################
# Deploy
##################################################################################################

  deploy-manylinux-64: &manylinux-deploy-template
    docker:
      - image: quay.io/pypa/manylinux1_x86_64

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install boost
          command: |
            yum install -y boost-devel

      - run:
          name: build wheels
          command: |
            for PYBIN in /opt/python/*/bin; do
              if "${PYBIN}/python" -c "import sys; sys.exit(sys.version_info>=(3, 5))"; then continue; fi;
              "${PYBIN}/pip" install -r requirements.txt
              "${PYBIN}/pip" wheel . -w ./wheelhouse
              "${PYBIN}/python" setup.py sdist -d ./dist
            done

      - run:
          name: bundle shared libraries into wheels
          command: |
            for whl in ./wheelhouse/dwave*orang*.whl; do
              auditwheel repair "$whl" -w ./dist
            done

      - store_artifacts:
          path: ./dist

      - run:
          name: create a virtualenv
          command: |
            pythons=(/opt/python/*/bin)
            python="${pythons[0]}"
            "$python/pip" install virtualenv
            "$python/python" -m virtualenv env

      - run: &upload-template
          name: install twine and deploy
          command: |
            . env/bin/activate
            python -m pip install twine
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD --skip-existing ./dist/*

  deploy-manylinux-32:
    <<: *manylinux-deploy-template
    docker:
      - image: quay.io/pypa/manylinux1_i686

  deploy-osx:
    parameters:
      python-version:
        type: string

    macos:
      xcode: "12.2.0"

    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      MACOSX_DEPLOYMENT_TARGET: 10.9

    steps:
      - checkout

      - run:
          name: install pyenv
          command: |
            brew install pyenv

      - run: *install-boost-osx-template

      # - run: *install-openmp-osx-template

      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.2.0

      - run:
          name: install python
          command: |
            pyenv install << parameters.python-version>> -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.2.0

      - run:
          name: create virtualenv
          command: |
            eval "$(pyenv init -)"
            pyenv local $PYTHON
            python -m pip install virtualenv
            python -m virtualenv env

      - run: *install-dependencies-template

      - run: *build-ext-template
        
      - run:
          name: create bdist_wheel
          command: |
            . env/bin/activate
            python setup.py bdist_wheel

      - store_artifacts:
          path: ./dist

      - run: *upload-template

  deploy-win:
    parameters:
      python-version:
        type: string
      architecture:
        type: string

    executor:
      name: win/default

    environment:
      CL: /d2FH4-

    steps:
      - checkout

      - run: *win-install-python-template

      - run: *win-install-dependencies-template

      - run: *win-install-boost-template

      - run: *win-build-ext-template

      - run: *win-build-wheel-template

      - store_artifacts:
          path: .\dist

      - run: &win-twine-template
          name: install twine and deploy
          command: |
            env\Scripts\activate.ps1
            python -m pip install twine
            twine upload -u $env:PYPI_USERNAME -p $env:PYPI_PASSWORD --skip-existing ./dist/*


workflows:
  test:
    jobs:
      # - test-linux:
      #     matrix:
      #       parameters:
      #         python-version: ["3.6.8", "3.7.5", "3.8.6", "3.9.0"]
      # - test-osx:
      #     matrix:
      #       parameters:
      #         python-version: ["3.6.8", "3.7.5", "3.8.6", "3.9.0"]
      - test-win:
          matrix:
            parameters:
              python-version: ["3.6.8", "3.7.5", "3.8.6", "3.9.0"]
              architecture: ["", "x86"]
      - test-doctest
  deploy:
    jobs:
      - deploy-manylinux-64:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-manylinux-32:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-osx:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          matrix:
            parameters:
              python-version: ["3.6.8", "3.7.5", "3.8.6", "3.9.0"]
      - deploy-win:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          matrix:
            parameters:
              python-version: ["3.6.8", "3.7.5", "3.8.6", "3.9.0"]
              architecture: ["", "x86"]
